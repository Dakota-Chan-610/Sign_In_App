function fetchCurrentSignInData() {
  var apiKey = 'Client_Key';
  var apiSecret = 'Client_Secret';
  var baseUrl = 'Base_URL';

  var sites = {
    'siteA': 'siteA_ID',
    'siteB': 'siteB_ID',
    'siteC': 'siteC_ID'
  };

  var groupMapping = {
    'GroupA_ID': 'GroupA',
    'GroupB_ID': 'GroupB',
    'GroupC_ID': 'GroupC',
    'GroupD_ID': 'GroupD',
    'GroupE_ID': 'GroupE',
    'GroupF_ID': 'GroupF',
    'GroupG_ID': 'GroupG'
  };

  var options = {
    'method': 'GET',
    'headers': {
      'Authorization': 'Basic ' + Utilities.base64Encode(apiKey + ':' + apiSecret),
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    'muteHttpExceptions': true
  };

  for (var region in sites) {
    var siteId = sites[region];
    var endpoint = '/sites/' + siteId + '/today';
    var url = baseUrl + endpoint;

    Logger.log('Request URL for ' + region + ': ' + url);

    var response = UrlFetchApp.fetch(url, options);
    var responseCode = response.getResponseCode();
    if (responseCode !== 200) {
      Logger.log('Error: ' + responseCode);
      Logger.log(response.getContentText());
      continue;
    }

    var data = JSON.parse(response.getContentText());

    var allData = [];

    // Iterate through each group in the response
    data.forEach(function(group) {
      // Check if the visitors array is not empty
      if (group.visitors && group.visitors.length > 0) {
        group.visitors.forEach(function(visitor) {
          allData.push(visitor);
        });
      }
    });

    if (allData.length === 0) {
      Logger.log('No data found for ' + region);
      continue;
    }

    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(region + ' Current');
    if (!sheet) {
      sheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet(region + ' Current');
    } else {
      sheet.clear(); // Clear existing data
    }

    var headers = Object.keys(allData[0]);
    var personalFieldsHeaders = [];
    var additionalFieldsHeaders = [];

    allData.forEach(function(row) {
      if (row.personal_fields) {
        Object.keys(row.personal_fields).forEach(function(key) {
          if (!personalFieldsHeaders.includes(key)) {
            personalFieldsHeaders.push(key);
          }
        });
      }
      if (row.additional_fields) {
        Object.keys(row.additional_fields).forEach(function(key) {
          if (!additionalFieldsHeaders.includes(key)) {
            additionalFieldsHeaders.push(key);
          }
        });
      }
    });

    var combinedHeaders = headers.concat(personalFieldsHeaders).concat(additionalFieldsHeaders);
    combinedHeaders[3] = 'Name_';
    combinedHeaders.push('group_name');
    sheet.appendRow(combinedHeaders);

    allData.forEach(function(row) {
      var rowData = headers.map(function(header) {
        return row[header];
      });

      personalFieldsHeaders.forEach(function(header) {
        rowData.push(row.personal_fields ? row.personal_fields[header] : '');
      });

      additionalFieldsHeaders.forEach(function(header) {
        rowData.push(row.additional_fields ? row.additional_fields[header] : '');
      });

      var groupName = groupMapping[row.group_id] || '';
        rowData.push(groupName);

      sheet.appendRow(rowData);
    });
  }
}
